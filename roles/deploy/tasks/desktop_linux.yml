### Package manager ###

- name: Install graphical packages (Debian)
  apt:
    cache_valid_time: 86400 # 1 day
    name:
      # sway/wayland related
      - rofi
      - flameshot

  become: true
  when: have_root and ansible_os_family == "Debian"

# RELEASE_BLOCKER do we need to setup flatpak first
- name: Install flatpak packages
  flatpak:
    name:
      # NB : the latest slack has broken screensharing, see sway config for details
      - com.slack.Slack
      - com.spotify.Client
      # RELEASE_BLOCKER 1password (check if other flatpaks are installed)
  when: ansible_os_family == "Debian"

### Locale ###

# The entire locale standard is quite brittle and can break stuff in unexpected ways.
# Be careful when changing anything here.
# https://github.com/mpv-player/mpv/commit/1e70e82baa91

# We want to set a locale with the following properties (by order of priority, I guess) :
# * English language
# * UTF-8 encoding
# * YYYY-MM-DD date format
# * 24h hour format
# * Week starts on monday
#
# Ideally, without resorting to building a custom locale, or installing any extra locale
# To this day, en_DK.UTF-8 looks like our best candidate, it only misses the weekday start, which I don't mind that much.
# TODO : See if we can find a better locale ?

# Ways to test a given locale :
# * LANG=en_DK.utf8 locale -k LC_TIME
# * LANG=en_DK.utf8 date

# Various programs respect the date format with various levels
# For example, Thunderbird, in its default config, reads the locale, and displays the date in the follwing formats :
# * en_US.UTF-8 : mm/dd/aa    -> makes sense
# * fr_FR.UTF-8 : dd/mm/aaaa  -> makes sense
# * en_DK.UTF-8 : dd/mm/aaaa  -> This format does not appear anywhere in this locale ...
# bug : https://bugzilla.mozilla.org/show_bug.cgi?id=1707128
# workaround : https://support.mozilla.org/en-US/kb/customize-date-time-formats-thunderbird

# Ways of setting up system locale
# https://docs.fedoraproject.org/en-US/fedora/latest/system-administrators-guide/basic-system-configuration/System_Locale_and_Keyboard_Configuration/
# https://wiki.debian.org/Locale
# https://wiki.archlinux.org/title/Locale#Setting_the_locale
# We currently don't set it as it is very invasive, and I'm worried about weird side effects, see later if it is required anyway.
# When launching sway through gdm, $LANG is overridden for the graphical session anyway.

# Setting up locale via Gnome for GDM to load is surprisingly hard too. The following were tried and could not be made to work :
# * Using ~/.dmrc (apparently only works for GDM 2.x, legacy)
# * Setting $LANG in ~/.config/environment.d/
#
# Using the gnome settings window (gnome-control-center), you can actually configure it. There are 2 parameters in its "Region & Language" section :
# * Language : sets $LANG.
#   I have no idea where this is stored, and found no way to set it programmatically.
#   Gnome propagates this change to the system locale (visible in `localectl status`), but it doesn't work the other way round.
#   I'm lost here, and honestly, if we really need to configure this, ditching GDM altogether might be worth considering.
# * Formats : sets various $LC_* variables.
#   This one corresponds to the org.gnome.system.locale/region gsettings key
#   But setting a value with `gsettings set org.gnome.system.locale region en_DK.UTF-8` does not work either.
#
# I've given up, just change it with gnome-control-center
#
# These changes require at least logging out, but you might as well reboot at every step, honestly.
# RELEASE_BLOCKER where is the locale actually set?
### Keyboard layouts ###

- name: Install lxml with pip3
  pip:
    name: lxml
    executable: pip3 # Should not be required, but I'd rather make sure
  become: true
  when: have_root | bool


# Maybe for debian, configuring this through debconf would be cleaner
# However I tried, and it was very annoying :
# * updating the debconf database did not trigger anything
#   * keyboard-configuration/layoutcode
#   * keyboard-configuration/variantcode
# * even manually triggering its reconfiguration with `dpkg-reconfigure keyboard-configuration -f noninteractive`
#   does regenerate initramfs but without changing /etc/default/keyboard
#
# TODO: See if we can use systemd commands for debian too

# - name: Configure XKBLAYOUT in /etc/default/keyboard (Debian)
#   lineinfile:
#     path: /etc/default/keyboard
#     line: 'XKBLAYOUT="{{ keyboard_layout }}"'
#     regexp: 'XKBLAYOUT=".*"'
#   become: true
#   when: (have_root | bool) and ansible_os_family == "Debian"
#   notify: keyboard_config
#
# - name: Configure XKBVARIANT in /etc/default/keyboard (Debian)
#   lineinfile:
#     path: /etc/default/keyboard
#     line: 'XKBVARIANT="{{ keyboard_variant }}"'
#     regexp: 'XKBVARIANT=".*"'
#   become: true
#   when: (have_root | bool) and ansible_os_family == "Debian"
#   notify: keyboard_config

# generic systemd configuration
# * https://docs.fedoraproject.org/en-US/fedora/rawhide/system-administrators-guide/basic-system-configuration/System_Locale_and_Keyboard_Configuration/
# * https://github.com/systemd/systemd/issues/6403 -> bug preventing using lafayette in VC ?

- name: Get previous keyboard layout configuration
  command: "localectl status"
  become: true
  when: have_root | bool
  changed_when: false # This command only reads state
  register: keyboard_layout_before

- name: Configure virtual console layout to vanilla qwerty
  command: "localectl --no-convert set-keymap us"
  become: true
  when: have_root | bool
  changed_when: false # Sadly, we can't detect changes with command return

- name: Get new keyboard layout configuration
  command: "localectl status"
  become: true
  when: have_root | bool
  changed_when: keyboard_layout_before.stdout != keyboard_layout_after.stdout
  register: keyboard_layout_after
  notify: keyboard_config


### Mako ###

- name: Create ~/.config/mako
  file:
    path: "{{ ansible_user_dir }}/.config/mako"
    state: directory

  # NB : We don't automatically reload Mako when its config changes
  # Use `makoctl reload`
- name: Load Mako config via ~/.config/mako/config
  file:
    state:  link
    follow: false
    src:    "{{ remote_directory }}/files/mako_config"
    dest:   "{{ ansible_user_dir }}/.config/mako/config"

- name: Create systemd user units directory
  file:
    state:  directory
    dest:   "{{ ansible_user_dir }}/.config/systemd/user"

- name: Create ssh-agent unit file
  copy:
    src:    "ssh-agent.service"
    dest:   "{{ ansible_user_dir }}/.config/systemd/user/"

- name: Enable ssh-agent user unit
  systemd:
    name: ssh-agent.service
    enabled:  true
    state:    started
    scope:    user
    daemon_reload: true



### Firefox ###
  # So, firefox has this notion of "profiles", which are basically independent config/data storages :
  # https://support.mozilla.org/en-US/kb/profiles-where-firefox-stores-user-data
  # Profile directory names are made of two elements :
  # * profile name (user-choosable, human-readable)
  # * random id

  # This creates a new profile. Might be worth exploring for new installs, but not for existing ones.
  # Renaming an existing profile directory without losing anything turns out to be surprisingly difficult.
  # - name: Create a firefox profile named "{{ firefox_profile_name }}"
  #   command:
  #     argv:
  #       - firefox
  #       - -CreateProfile
  #       - "{{ firefox_profile_name }}"
  #   # NB : This command apparently doesn't do anything if the profile already exists
  #   changed_when: false

  # Here, we find the profile with the given name by globbing
  # It _could_ break if several such directories existed, for example. It should be fine, though.
- name: Get firefox profile path
  find:
    paths: "{{ ansible_user_dir }}/.mozilla/firefox/"
    file_type: directory
    patterns: ".*{{ firefox_profile_name }}$"
    use_regex: true
  register: firefox_profile_path

- name: Display determined profile path
  assert:
    that: firefox_profile_path['files'][0]['path'] is defined
    msg:  "Could not find a firefox profile directory for name {{ firefox_profile_name }}"

# RELEASE_BLOCKER could be ported to also work on macos
- name: Setup firefox user config
  blockinfile:
    path: "{{ firefox_profile_path['files'][0]['path'] }}/user.js"
    marker: "# {mark} GLOBALRC ANSIBLE MANAGED BLOCK"
    create: true
    block: |
      // Warning : first line might get skipped ?

      // Settings configured here appear in about:config
      // They can be overriden by user at runtime, but will get reset at next startup
      // NB : properties configured by user interface are stored in prefs.js in profile directory

      // There are several ways to configure a system-wide config file, but they feel heavy
      // https://support.mozilla.org/en-US/kb/customizing-firefox-using-autoconfig
      // https://mike.kaply.com/2012/03/16/customizing-firefox-autoconfig-files/
      // https://mike.kaply.com/2012/03/15/customizing-firefox-default-preference-files/
      // https://askubuntu.com/questions/59330/setting-system-wide-preferences-in-firefox

      // Docs (unofficial) about any specific setting : https://kb.mozillazine.org/

      // Disable built-in password manager
      user_pref("signon.rememberSignons", false);                       // Offer to save user-provided passwords
      user_pref("signon.autofillForms", false);                         // Auto-fill already saved passwords
      user_pref("signon.generation.enabled", false);                    // Auto-generate passwords
      user_pref("signon.firefoxRelay.feature", "disabled");             // Generate per-site email aliases
      user_pref("extensions.formautofill.creditCards.enabled", false);  // Credit card autofilling

      // Ask nicely to websites not to track me
      user_pref("privacy.donottrackheader.enabled", true);
      user_pref("privacy.globalprivacycontrol.enabled", true);
      user_pref("privacy.globalprivacycontrol.was_ever_enabled", true);

      // NEVER open anything in a new window, use a new tab instead
      user_pref("browser.link.open_newwindow", 3);              // Use tabs instead of windows for normal navigation

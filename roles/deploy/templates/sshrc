#!/usr/bin/env bash
# /!\ This script is copied over at each ssh connexion
# Therefore, it must stay as small and simple as possible
# NB : This file has to stay compatible both with bash and zsh
# TODO : Use the templating system to "Compile" only the
# strict necessary at deploy-time
# See https://github.com/Russell91/sshrc

# If we are running bash, but zsh is installed, switch to zsh
# TODO : we should not hardcode this path
if [[ $0 =~ 'bash' && -x '/usr/bin/zsh' ]]; then
  if [ ! -d .globalrc ]; then
    export ZDOTDIR_ORIG="${ZDOTDIR_ORIG:-${ZDOTDIR:-$HOME}}"
    export ZDOTDIR="$SSHHOME/.sshrc.d"
  fi
  # $export SHELL='/usr/bin/zsh' # Why the hell do we need to do that ?!
  exec zsh
fi

# alacritty is usually not installed on the remote system, and therefore not present in the remote terminfo database
# We want to override TERM in this case
# If so, we try xterm-256color as a substitute
# Otherwise, xterm should be present no matter what
# refs : https://github.com/alacritty/alacritty/blob/master/INSTALL.md#terminfo
# Possible solutions to this problem :
# * Override TERM in .sshrc (current) :
#   * - Does not work for situations where ssh is invoked without sshrc (scripts, gcloud compute ssh, etc...)
# * Copy terminfo file to remote with sshrc :
#   * - Does not work for situations where ssh is invoked without sshrc (scripts, gcloud compute ssh, etc...)
#   * - More complex to implement
#   * + More exact capabilities than falling back to xterm-*
# * Override TERM in ssh client config with SetEnv
#   * - May break situations where the local terminal is not actually alacritty (console login ...)
#   * - Applies the fallback inconditionally on the remote, even if it does indeed support your current terminal
# * Override TERM in local shell startup files
#   * - May break situations where the local terminal is not actually alacritty (console login ...) on local AND remote
#   * - Applies the fallback inconditionally on the local AND remote, even if it does indeed support your current terminal
# * Install alacritty terminfo on the remote
#   * - Requires installing packages on the remote
#   * + Simple
#   * + Most exact solution
# * Override TERM in remote shell startup files
#   * - Requires editing files on the remote, especially problematic on shared servers
#   * - Simple

if ! infocmp $TERM &> /dev/null; then
  if infocmp xterm-256color &> /dev/null; then
    export TERM=xterm-256color
  else
    export TERM=xterm
  fi
fi

# Check if the globalrc is installed, if so, abort everything
# Please note that since this file is sourced after the remote bashrc,
# if there is an installed globalrc remotely, SSHHOME is overrided, and
# the .sshrc of the _server_ gets sourced
# TODO : make bashrc abort early in this case, to save time, since the whole
#   zsh environment is gonna get sourced anyway
# /!\ The location is currently not configurable
if [ -d .globalrc ]; then
  echo "SSHRC disabled because GLOBALRC present"
  return 0
fi

### Actual payload ###

# keep an easy access to the original tmux, just in case
alias tmux_vanilla="/usr/bin/tmux"

# Overload the tmux command to load sshrc
tmux() {
  local TMUXDIR="/tmp/tmux-sshrc-$USER"
  if ! [ -d "$TMUXDIR" ]; then
    rm -rf "$TMUXDIR"
    mkdir -m 0700 "$TMUXDIR"
  fi
  rm -rf "$TMUXDIR/.sshrc.d"
  \cp -r "$SSHHOME/.sshrc" "$SSHHOME/bashsshrc" "$SSHHOME/sshrc" "$SSHHOME/.sshrc.d" "$TMUXDIR"
  SSHHOME="$TMUXDIR" SHELL="$TMUXDIR/bashsshrc" /usr/bin/tmux -S "$TMUXDIR/tmuxserver" -f "$TMUXDIR/.sshrc.d/.tmux.conf" "$@"
}

# Load the readline settings
export INPUTRC="$SSHHOME/.sshrc.d/inputrc"

# Make agent-forwarding work even when reattaching screen/tmux
# TODO: This is copied from commonrc, we need to find a way to manage common components like that
if [ -S "$SSH_AUTH_SOCK" ] && [ ! -h "$SSH_AUTH_SOCK" ]; then
  ln -sf "$SSH_AUTH_SOCK" "{{ ssh_agent_symlink_path }}"
  export SSH_AUTH_SOCK="{{ ssh_agent_symlink_path }}"
fi


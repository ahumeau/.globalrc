{#
# For configuration guides, see :
# https://gist.github.com/snuggs/800936
# https://wiki.archlinux.org/index.php/Tmux
# https://gist.github.com/spicycode/1229612
#
# For the list of breaking changes and, and how to deal with them, see :
# https://github.com/tmux/tmux/blob/master/CHANGES
# https://stackoverflow.com/questions/35016458/how-to-write-if-statement-in-tmux-conf-to-set-different-options-for-different-t/40902312#40902312
#}

{# Start numbering windows from 1 (0 is too far away) #}
set -g base-index 1

{# More lines of scrollback history #}
set -g history-limit 10000

{# Propagate the $TERM variable to child shells, for color and special glyphs #}
{# This is way cleaner than setting it from the shell startup files #}
set -g default-terminal "$TERM"

{#
# Allow support for true 24-bit colors
# TODO : maybe we should only override this if $TERM contains "256color"
# tmux >= v2.2:
#}
if-shell "tmux -V | awk '{exit !($2 >= \"2.2\")}'" \
  'set -ga terminal-overrides ",xterm-256color:Tc"'

{#
# Enable mouse for different versions of tmux
# (If 'awk' exits with status 0, 'if-shell' evaluates to true)
# This is a if-then-else syntax, see man tmux
# tmux >= v2.1:
#}
if-shell "tmux -V | awk '{exit !($2 >= \"2.1\")}'" \
    "set -g mouse on" \
    "set -g mode-mouse on ; set -g mouse-select-pane on ; set -g mouse-resize-pane on ; set -g mouse-select-window on"

{#
# Emulate scrolling by sending up and down keys if specific commands are running in the pane
# https://superuser.com/questions/989505/pass-mouse-events-through-tmux
#}
tmux_commands_with_legacy_scroll="nano less more man git"

bind-key -T root WheelUpPane \
  if-shell -Ft= '#{?mouse_any_flag,1,#{pane_in_mode}}' \
    'send -Mt=' \
    'if-shell -t= "#{?alternate_on,true,false} || echo \"#{tmux_commands_with_legacy_scroll}\" | grep -q \"#{pane_current_command}\"" \
      "send -t= Up Up Up" "copy-mode -et="'

bind-key -T root WheelDownPane \
  if-shell -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
    'send -Mt=' \
    'if-shell -t= "#{?alternate_on,true,false} || echo \"#{tmux_commands_with_legacy_scroll}\" | grep -q \"#{pane_current_command}\"" \
      "send -t= Down Down Down" "send -Mt="'


{# reload tmux conf with C-b r #}
bind-key r source-file "{{ ansible_user_dir }}/.tmux.conf"

{#
# NB : This requires tmux >= v1.8, add a test
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
# TODO : C-\ apparently refers to vim mapleader key, this should be configured
# to the same at the ansible role scale
# bind-key -n C-m if-shell "$is_vim" "send-keys C-m" "select-pane -l"
# NB : C-m <=> Enter
# bind-key -T copy-mode-vi C-m select-pane -l
# The actual keybindings are defined in the relevant section of this file
#}
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

### KEYBINDINGS ###

{#
# NB : We tried some trickery to use tmux (on a server, over ssh) inside tmux (locally)
# without bindings conflicts, but it doesn't work very well, and is not all that useful to me
# cf http://stahlke.org/dan/tmux-nested/
# If I ever want to do somthing like this again, connecting a local tmux client to a remote server
# is probably the way to go.
#}

{# Use Alt-h and Alt-l to change tab #}
bind-key -n M-h prev
bind-key -n M-l next

{% if ansible_system == "Darwin" %}
# Temporary workaround for Mac, as there's a signle layer for Alt and AltGr
set-option -qg prefix C-f
{% else %}
{# Use Alt-f as default prefix key #}
set-option -qg prefix M-f
{% endif %}

{# Movement across panes with awareness of vim splits #}
bind-key -n C-{{ key_rh_left  }} if-shell "$is_vim" "send-keys C-{{ key_rh_left  }}"  "select-pane -L"
bind-key -n C-{{ key_rh_down  }} if-shell "$is_vim" "send-keys C-{{ key_rh_down  }}"  "select-pane -D"
bind-key -n C-{{ key_rh_up    }} if-shell "$is_vim" "send-keys C-{{ key_rh_up    }}"  "select-pane -U"
bind-key -n C-{{ key_rh_right }} if-shell "$is_vim" "send-keys C-{{ key_rh_right }}"  "select-pane -R"
bind-key -T copy-mode-vi C-{{ key_rh_left  }} select-pane -L
bind-key -T copy-mode-vi C-{{ key_rh_down  }} select-pane -D
bind-key -T copy-mode-vi C-{{ key_rh_up    }} select-pane -U
bind-key -T copy-mode-vi C-{{ key_rh_right }} select-pane -R


" Nice resources to get started :
" http://nvie.com/posts/how-i-boosted-my-vim/
" http://learnvimscriptthehardway.stevelosh.com/

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Load Plugins via vim-plug
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible              " be iMproved, required
filetype off                  " required

" Manually load vim-plug, to avoid installing it ouside the vim directory
set rtp+={{ remote_directory }}/vim/bundle/vim-plug
source {{ remote_directory }}/vim/bundle/vim-plug/plug.vim
" Start vim-plug with a path for installing plugins
call plug#begin('{{ remote_directory }}/vim/bundle')

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin-specific pre-configuration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" change the mapleader from \ to ,
" this command must be before anything using <leader>
let mapleader=","

""" bundle/vim-togglemouse/plugin/toggle_mouse.vim """
map <leader>m <Plug>ToggleMouse
    " toggle mouse usage with ,m

""" vim-tmux-navigator
let g:tmux_navigator_no_mappings = 1
    " Do not use the default mappings


"""""""""""""""
" Plugin list "
"""""""""""""""
" See https://github.com/junegunn/vim-plug for supported syntaxes

" Nice examples here :
" http://vim.wikia.com/wiki/Use_Vim_like_an_IDE
" https://github.com/VundleVim/Vundle.vim/wiki/Examples

" User interface
" Plug 'nvie/vim-togglemouse'         " toggle mouse access (reconfigured earlier)
Plug 'toadjaune/vim-togglemouse'   " use my fork while it's not merged
Plug 'vim-scripts/CycleColor'         " cycle through colors via F4
Plug 'godlygeek/tabular'              " provides :Tab to align text
Plug 'christoomey/vim-tmux-navigator'
    " Consistent set of keys to navigate between vim splits and tmux panels
Plug 'vim-airline/vim-airline'        " OP statusbar
Plug 'vim-airline/vim-airline-themes' " Associated themes
Plug 'guns/xterm-color-table.vim'     " :XtermColorTable to display xterm color palette

" Filesystem access (Tree ...)
Plug 'scrooloose/nerdtree'    " filesystem tree
Plug 'kien/ctrlp.vim'         " fuzzy search through filesystem/buffers

" Git
Plug 'tpope/vim-fugitive'     " Access to git commands from Vim
Plug 'tpope/vim-git'          " Git syntax highlighting
Plug 'Xuyuanp/nerdtree-git-plugin'  " Diplays git files status in NERDtree
Plug 'airblade/vim-gitgutter' " Displays signs for git modifications

" Development tools
Plug 'Yggdroot/indentLine'      " Vertical bars to display indentation with conceal feature
    " TODO : Try to find a way to keep trailing characters displayed instead
    " of concealing them too
Plug 'vim-syntastic/syntastic'  " Syntax checking

" Auto-completion, with omnicomp
" Plug 'Valloric/YouCompleteMe'
    " Seems both overkill and not really adapted to my needs, let's keep it
    " there just in case
    " /!\ Requires a compiled module, check on the source
    " /!\ May not be very good for ruby&co, this is experimental
" Plug 'vim-scripts/AutoComplPop' " Display automatically the omni completion popup/dropdown while typing
    " Weird errors, gonna try to summon with C-x C-o for now
Plug 'ervandew/supertab'      " Use tab for completion

" TODO: See similar behavior with wildmenu and wildmode
" Also see ballooning
" So far, couldn't find a way to use the mouse on the completion dropdown

" Ruby & Rails
Plug 'tpope/vim-rails'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-endwise' " NB: This plugin also affects other languages

" Colorschemes
Plug 'agude/vim-eldar'
Plug 'Lokaltog/vim-distinguished'
Plug 'tpope/vim-vividchalk'
" The following directory contains badly packaged colorschemes, downloaded by Ansible
Plug '{{ remote_directory }}/vim/bundle/colorschemes-manual'

"""""""""""""""

" All of your Plugins must be added before the following line
call plug#end()              " required
filetype plugin indent on    " required


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin-specific post-configuration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""" nerdtree """
" start nerdtree automatically if vim is started without argument
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" start nerdtree automatically if vim starts opening a directory
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
" close vim if nerdtree is the only remaining window
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

""" airline """
let g:airline_theme='murmur'      " Choose airline theme
" Enable Powerline enhanced fonts (nice git symbols + arrows in statusbar)
" This should be enabled only if a powerline font is detected in curent
" terminal
let g:airline_powerline_fonts = 1
" Add a line with opened tabs
let g:airline#extensions#tabline#enabled = 1

""" syntastic """
" Automatically fill location list (disabled by default to limit conflict with
" other plugins)
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1

let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Hides buffers instead of closing them
" This allows you to have several files open with unsaved chages
set hidden

" Set to auto read when a file is changed from the outside
set autoread

" Use :WS to save with sudo if you opened the file without enough rights
command! WS :execute ':silent w !sudo tee % > /dev/null' | :edit!

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set backspace=eol,start,indent  " Allow backspacing over everything in insert mode

" Configure which keys can change line when at beginning/end of line (see :help 'whichwrap')
set whichwrap+=[,]

" Configure folding (see :help folding)
set foldmethod=syntax
set foldlevel=1

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

set showmatch     " Show matching brackets when text indicator is over them
set mat=2         " How many tenths of a second to blink when matching brackets
set number        " Show line number
set mouse=a       " Enable mouse interaction

" Enable/Disable Paste Mode with ,p
noremap <silent> <leader>p :set nu!<CR>:setlocal paste!<CR>

" Reload vimrc with ,r
nnoremap <leader>r :source $MYVIMRC<CR>

set history=1000         " remember more commands and search history
set undolevels=1000      " remember more actions in undo buffer
set title                " change the terminal's title
set visualbell           " don't beep
set noerrorbells         " don't beep

" Display whitespaces
set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.

" Make vim use the system clipboard ("+) by default
" See http://vim.wikia.com/wiki/Accessing_the_system_clipboard
set clipboard=unnamedplus

set cursorline  " highlight cursor line
    " TODO: Find a way to only change the background color, not the trailing
    " characters or the highlightings of TODO ...
    " Apparently not possible yet :
    " https://stackoverflow.com/questions/15980451/cursorline-and-nontext-specialkey-highlight-clash
    " https://github.com/vim/vim/blob/master/runtime/doc/todo.txt
    " https://vi.stackexchange.com/questions/3288/override-cursorline-background-color-by-syntax-highlighting
    " Eventual possible hack :
    " https://github.com/ntpeters/vim-better-whitespace

" Remove trailing whitespaces with ,t
" This currently adds a line to search history, and disables highlighting if
" currently enabled
nnoremap <silent> <leader>t :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>

" Quick cursor movement with Shift key
" noremap <S-j> 5j
" noremap <S-k> 5k
" noremap <S-h> 5h
" noremap <S-l> 5l

" Quick getting out of insert mode
inoremap ts <esc>

" Movement keys for b√©po
noremap t j
noremap j t
noremap s k
noremap k s
noremap r l
noremap l r
noremap n h
noremap h n

" Navigating across vim splits and tmux panes
noremap <silent> <C-n> :TmuxNavigateLeft<cr>
noremap <silent> <C-t> :TmuxNavigateDown<cr>
noremap <silent> <C-s> :TmuxNavigateUp<cr>
noremap <silent> <C-r> :TmuxNavigateRight<cr>
" noremap <silent> <C-m> :TmuxNavigatePrevious<cr>

" Unmapping of default keys, to get used to remappings
" inoremap <esc>    <nop>
" noremap  <up>     <nop>
" noremap  <down>   <nop>
" noremap  <left>   <nop>
" noremap  <right>  <nop>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Search settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set ignorecase    " Ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase,
                    "    case-sensitive otherwise
set hlsearch      " Highlight search results
set incsearch     " show search matches as you type
nnoremap <silent> <leader>/ :nohlsearch<CR>
                  " clear search buffer by typing ,/

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf-8
set fileencoding=utf-8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Base colorscheme choice
set background=dark
silent! colorscheme eldar

" Manual color override
" Trailing whitespaces & co in Orange
hi  SpecialKey ctermfg=214

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set autoindent    " always set autoindenting on
set copyindent    " copy the previous indentation on autoindenting
set expandtab     " use spaces instead of tabs
set smarttab      " insert tabs on the start of a line according to
                    "    shiftwidth, not tabstop
set shiftwidth=2  " 1 tab == 2 spaces
set tabstop=2
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'

set smartindent
if has("autocmd")
  filetype plugin indent on " Detect indentation rules based on file extension
endif

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines
nnoremap <silent> <leader>w :set wrap!<CR>
      " Enable/disable line wrapping with ,w


""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" " Format the status line
" set statusline=\ %f%m%r%y\ %w\ \ CWD:\ %{GetCurrentDirectory()}%=b:%-2n\ \ r:%l/%L\ c:%-3v\ %P


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! GetCurrentDirectory()
  return fnamemodify(getcwd(), ":~")
endfunction
nnoremap <silent> <leader>t :%s/\s\+$//e <Bar> :nohl <CR>

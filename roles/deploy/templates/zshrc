#!/bin/zsh

# To get started with your own zshrc, start with the folloiwing script :
# (it is the one run by default by zsh at shell startup if you have no zshrc)
# `zsh /usr/share/zsh/functions/Newuser/zsh-newuser-install -f`
#
# Many options here were extracted from gmrl conf. See https://grml.org/zsh/

# Places you into current directory
pushd $(dirname $0) > /dev/null

# Loading common components
if [ -f ../commonrc ]; then
  pushd .. > /dev/null
  source commonrc
  popd > /dev/null
fi

# Try to switch to a 256-color terminal
# Can be cancelled setting the $DISABLE_256_COLORS variable to anything
if [ -z $DISABLE_256_COLORS ]; then
  # This section tries to set 256-colors environment
  # run `for code in {000..255}; do print -P -- "$code: %F{$code}Test%f"; done` to see possible colors

  # We save the original terminal status, in case we need it
  export TERM_ORIG="$TERM"

  # Need to add some check here before doing it
  # Might also need to do something about $TERMCAP
  # Currently we assume that we have 256-color if there's no unicode problem detected
  # if [[ $UNICODE_VALID == 1 ]]; then
  #   export TERM=xterm-256color
  # fi
fi

### Begin various configuration ###

HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
bindkey -v

# Allow help
autoload -U run-help
autoload run-help-git

# zmv is a mass-rename tool
autoload zmv

# Report about cpu-/system-/user-time of command if running longer than 5 seconds
REPORTTIME=5

# This prints a message every time somebody else than me logs in/out
watch=notme

# append history list to the history file; this is the default but we make sure
# because it's required for share_history.
setopt append_history

# save each command's beginning timestamp and the duration to the history file
setopt extended_history

# If a new command line being added to the history list duplicates an older
# one, the older command is removed from the list
setopt histignorealldups

# remove command lines from the history list when the first character on the
# line is a space
setopt histignorespace

# if a command is issued that can't be executed as a normal command, and the
# command is the name of a directory, perform the cd command to that directory.
setopt auto_cd

# display PID when suspending processes as well
setopt longlistjobs

# make cd push the old directory onto the directory stack.
setopt auto_pushd

# avoid "beep"ing
setopt nobeep

# don't push the same dir twice.
setopt pushd_ignore_dups

### End various configuration ###



### Begin completion pre-configuration ###

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _complete _ignored _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' insert-unambiguous true
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-prompt '%SAt %p: Hit TAB for more, or the character to insert%s'
zstyle ':completion:*' matcher-list '' 'm:{[:lower:]}={[:upper:]}' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'r:|[._-]=* r:|=*'
zstyle ':completion:*' max-errors 2
zstyle ':completion:*' menu select=5
zstyle ':completion:*' original false
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
zstyle ':completion:*' use-compctl false

# Provide more processes in completion of programs like killall:
zstyle ':completion:*:processes-names' command 'ps c -u ${USER} -o command | uniq'

# Search path for sudo completion
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin \
                                           /usr/local/bin  \
                                           /usr/sbin       \
                                           /usr/bin        \
                                           /sbin           \
                                           /bin            \
                                           /usr/X11R6/bin


# host completion TODO: include .globalrc/ssh_hosts
[[ -r ~/.ssh/config ]] && _ssh_config_hosts=(${${(s: :)${(ps:\t:)${${(@M)${(f)"$(<$HOME/.ssh/config)"}:#Host *}#Host }}}:#*[*?]*}) || _ssh_config_hosts=()
[[ -r ~/.ssh/known_hosts ]] && _ssh_hosts=(${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:#[\|]*}%%\ *}%%,*}) || _ssh_hosts=()
[[ -r /etc/hosts ]] && : ${(A)_etc_hosts:=${(s: :)${(ps:\t:)${${(f)~~"$(</etc/hosts)"}%%\#*}##[:blank:]#[^[:blank:]]#}}} || _etc_hosts=()

hosts=(
    $(hostname)
    "$_ssh_config_hosts[@]"
    "$_ssh_hosts[@]"
    "$_etc_hosts[@]"
    localhost
)
zstyle ':completion:*:hosts' hosts $hosts

# use generic completion system for programs not yet defined; (_gnu_generic works
# with commands that provide a --help option with "standard" gnu-like output.)
for compcom in cp deborphan df feh fetchipac gpasswd head hnb ipacsum mv \
               pal stow uname ; do
    [[ -z ${_comps[$compcom]} ]] && compdef _gnu_generic ${compcom}
done; unset compcom

### End completion pre-configuration ###



### Begin custom functions definition ###

# IRC-client-like input, to store in history a partial command
# cf http://www.zshwiki.org/home/zle/ircclientlikeinput
# /!\ This probably won't work if done after other widget
# changes affecting down-line-or-history

fake-accept-line() {
  if [[ -n "$BUFFER" ]];
  then
    print -S "$BUFFER"
  fi
  return 0
}
zle -N fake-accept-line

down-or-fake-accept-line() {
  if (( HISTNO == HISTCMD )) && [[ "$RBUFFER" != *$'\n'* ]];
  then
    zle fake-accept-line
  fi
  zle .down-line-or-history "$@"
}
zle -N down-line-or-history down-or-fake-accept-line


# Terminal-title wizardry
function ESC_print () {
    info_print $'\ek' $'\e\\' "$@"
}
function set_title () {
    info_print  $'\e]0;' $'\a' "$@"
}

function info_print () {
    local esc_begin esc_end
    esc_begin="$1"
    esc_end="$2"
    shift 2
    printf '%s' ${esc_begin}
    printf '%s' "$*"
    printf '%s' "${esc_end}"
}

# set variable debian_chroot if running in a chroot with /etc/debian_chroot
# TODO: This is probably movable to common conf. And it's not a custom function.
if [[ -z "$debian_chroot" ]] && [[ -r /etc/debian_chroot ]] ; then
    debian_chroot=$(</etc/debian_chroot)
fi

### End custom functions definition ###

# Start zplug plugin manager
source zplug
# The completion initialization is done by zplug, we shouldn't do it ourselves unless zplug is disabled
# TODO: re-enable this for sshrc compilation, when disabling zplug
# autoload -Uz compinit
# if [[ ${UID} -eq 0 ]] && [[ -n ${SUDO_USER} ]]; then
#   # We are root, do not check for insecure directories, since this check was
#   # done for your regular user, and since some files in fpath do not belong to
#   # root but to your regular user
#   compinit -u
# else
#   compinit
# fi


# Key mappings common to several keymaps
keymap_list=('viins' 'vicmd' 'visual')

for keymap in $keymap_list; do
  # Aliasing movement keys (With Alt) to arrow keys
  # NB: Mapping to arrow keys instead of directly to corresponding
  # zle widgets is convenient, because it uses every default mapping
  # to these arrows
  # See http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html
  bindkey -M $keymap -s '^[{{ key_rh_left  }}' '^[[D'
  bindkey -M $keymap -s '^[{{ key_rh_down  }}' '^[[B'
  bindkey -M $keymap -s '^[{{ key_rh_up    }}' '^[[A'
  bindkey -M $keymap -s '^[{{ key_rh_right }}' '^[[C'
done

# History backwards search (supports globbing)
bindkey '^[c' history-incremental-pattern-search-backward

# Get out of insert/visual mode with Alt-space (mapping to Esc)
bindkey -s '^[ ' '\e'

# Extra manual completion aliasing
# /!\ This MUST be done after compinit
compdef sshrc=ssh
compdef mosh=ssh
compdef moshrc=ssh

# Comes back into previous directory
popd > /dev/null

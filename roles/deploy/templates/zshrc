#!/bin/zsh

# To get started with your own zshrc, start with the folloiwing script :
# (it is the one run by default by zsh at shell startup if you have no zshrc)
# `zsh /usr/share/zsh/functions/Newuser/zsh-newuser-install -f`
#
# Many options here were extracted from gmrl conf. See https://grml.org/zsh/

# Places you into current directory
pushd $(dirname $0) > /dev/null

# Loading common components
source bazshrc.sh

# Expand fpath to include custom functions
fpath=({{ remote_directory }}/files/zsh_fpath $fpath)
# Autoload custom functions defined in zsh_fpath
autoload mkcd

### Begin various configuration ###

# For `setopt` possible values and documentation, see : http://zsh.sourceforge.net/Doc/Release/Options.html
# For history variables, see : http://zsh.sourceforge.net/Guide/zshguide02.html#l17

# Allow help
autoload -U run-help
autoload run-help-git

# zmv is a mass-rename tool
autoload zmv

# Path of file containing command history
# NB: This path is in user's home even in case of sshrc
HISTFILE=~/.zsh_history

# Number of history commands to read at shell startup, and to keep per session
HISTSIZE=1000

# Number of history commands to write at shell exit
SAVEHIST=1000

# Add commands to history file directly at execution time
setopt inc_append_history_time

# Never ever store duplicates in history
setopt hist_ignore_all_dups

# remove command lines from the history list when the first character on the
# line is a space
setopt hist_ignore_space

# Store commands in history without extraneous spaces
setopt hist_reduce_blanks

# Report about cpu-/system-/user-time of command if running longer than 5 seconds
REPORTTIME=5

# Print a message every time somebody else than me logs in/out
watch=notme

# if a command is issued that can't be executed as a normal command, and the
# command is the name of a directory, perform the cd command to that directory.
setopt auto_cd

# display PID when suspending processes as well
setopt long_list_jobs

# make cd push the old directory onto the directory stack.
setopt auto_pushd

# avoid "beep"ing
setopt no_beep

# don't push the same dir twice.
setopt pushd_ignore_dups

### End various configuration ###



### Begin completion pre-configuration ###

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _complete _ignored _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' insert-unambiguous true
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-prompt '%SAt %p: Hit TAB for more, or the character to insert%s'
zstyle ':completion:*' matcher-list '' 'm:{[:lower:]}={[:upper:]}' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'r:|[._-]=* r:|=*'
zstyle ':completion:*' max-errors 2
zstyle ':completion:*' menu select=5
zstyle ':completion:*' original false
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
zstyle ':completion:*' use-compctl false

# Provide more processes in completion of programs like killall:
zstyle ':completion:*:processes-names' command 'ps c -u ${USER} -o command | uniq'

# Search path for sudo completion
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin \
                                           /usr/local/bin  \
                                           /usr/sbin       \
                                           /usr/bin        \
                                           /sbin           \
                                           /bin            \
                                           /usr/X11R6/bin


# host completion
[[ -r ~/.ssh/config ]] && _ssh_config_hosts=(${${(s: :)${(ps:\t:)${${(@M)${(f)"$(<$HOME/.ssh/config)"}:#Host *}#Host }}}:#*[*?]*}) || _ssh_config_hosts=()
[[ -r ~/.ssh/known_hosts ]] && _ssh_hosts=(${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:#[\|]*}%%\ *}%%,*}) || _ssh_hosts=()
[[ -r /etc/hosts ]] && : ${(A)_etc_hosts:=${(s: :)${(ps:\t:)${${(f)~~"$(</etc/hosts)"}%%\#*}##[:blank:]#[^[:blank:]]#}}} || _etc_hosts=()

hosts=(
    $(hostname)
    "$_ssh_config_hosts[@]"
    "$_ssh_hosts[@]"
    "$_etc_hosts[@]"
    localhost
)
zstyle ':completion:*:hosts' hosts $hosts

### End completion pre-configuration ###



### Begin custom stuff ###

# IRC-client-like input, to store in history a partial command
# cf http://www.zshwiki.org/home/zle/ircclientlikeinput
# /!\ This probably won't work if done after other widget
# changes affecting down-line-or-history

fake-accept-line() {
  if [[ -n "$BUFFER" ]];
  then
    print -S "$BUFFER"
  fi
  return 0
}
zle -N fake-accept-line

down-or-fake-accept-line() {
  if (( HISTNO == HISTCMD )) && [[ "$RBUFFER" != *$'\n'* ]];
  then
    zle fake-accept-line
  fi
  zle .down-line-or-history "$@"
}
zle -N down-line-or-history down-or-fake-accept-line


# Terminal-title wizardry
function ESC_print () {
    info_print $'\ek' $'\e\\' "$@"
}
function set_title () {
    info_print  $'\e]0;' $'\a' "$@"
}

function info_print () {
    local esc_begin esc_end
    esc_begin="$1"
    esc_end="$2"
    shift 2
    printf '%s' ${esc_begin}
    printf '%s' "$*"
    printf '%s' "${esc_end}"
}

# set variable debian_chroot if running in a chroot with /etc/debian_chroot
# TODO: This is probably movable to common conf.
if [[ -z "$debian_chroot" ]] && [[ -r /etc/debian_chroot ]] ; then
    debian_chroot=$(</etc/debian_chroot)
fi

# Just use G to pipe to grep
# NB: this only expands in the case of space-separated G alone
# See alias, in `man zshbuiltins`
alias -g G='| grep'

### End custom stuff ###

###############################################################################
# Plugins pre-configuration                                                   #
###############################################################################

# See https://github.com/unixorn/awesome-zsh-plugins for zsh plugins

### zsh-syntax-highlighting ###
# Choose enabled highlighters
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

### powerlevel10k ###
# based on https://github.com/tonylambiris/dotfiles/blob/master/dot.zshrc
source zsh_theme_config.zsh

###############################################################################

### List of plugins ###

# Fish-like history-based suggestions
# TODO : Use ansible templating instead of this variable
source "{{ remote_directory }}/zsh_plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"

# Community packaging of completions for common programs
fpath=({{ remote_directory }}/zsh_plugins/zsh-completions/src $fpath)

# We both need 256 colors support, and a patched font, for p10k to work normally
if [[ -n $GLOBALRC_256_COLORS && -n $GLOBALRC_PATCHED_FONT ]]; then
  # Powerlevel10k, prompt configuration
  source "{{ remote_directory }}/zsh_plugins/powerlevel10k/powerlevel10k.zsh-theme"
else
  # Just load legacy prompt
  source zsh_prompt.zsh
fi

autoload -Uz compinit
if [[ ${UID} -eq 0 ]] && [[ -n ${SUDO_USER} ]]; then
  # We are root, do not check for insecure directories, since this check was
  # done for your regular user, and since some files in fpath do not belong to
  # root but to your regular user
  compinit -u
else
  compinit
fi

# Fish-like syntax highlighting
# NB : MUST be sourced after compinit (and as late as possible)
# NB : The highlighting gets slow on large buffers.
# TODO: For a fix approach, see : https://github.com/zsh-users/zsh-syntax-highlighting/issues/361
source "{{ remote_directory }}/zsh_plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"

###############################################################################
# Plugins post-configuration                                                  #
###############################################################################

### zsh-syntax-highlighting ###
# Main highlight configuration (not all available options)
ZSH_HIGHLIGHT_STYLES+=(
  unknown-token         'fg=red,bold'
  reserved-word         'fg=yellow'
  alias                 'fg=green,bold'
  builtin               'fg=green,bold'
  function              'fg=green,bold'
  command               'fg=green,bold'
  precommand            'fg=green'
  hashed-command        'fg=green'
  path                  'fg=blue,bold'
  path_prefix           'fg=blue'
  path_approx           'fg=blue,underlined'
  globbing              'fg=yellow,underlined'
  single-hyphen-option  'fg=purple,bold'
  double-hyphen-option  'fg=purple,bold'
  back-quoted-argument  'fg=purple,bold'
  default               'fg=cyan,bold'
)

### zsh-autosuggestions ###
ZSH_AUTOSUGGEST_USE_ASYNC=1         # fetch suggestions asynchronously
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=200 # Disable suggestions past a certain command length

# We're not savages so we manually bind the wigets once, at initialization, instead of at
# every single precmd
ZSH_AUTOSUGGEST_MANUAL_REBIND=1
_zsh_autosuggest_bind_widgets

###############################################################################


### Start key mappings ###

# Switch to vi keymaps
bindkey -v

# Key mappings common to several keymaps
keymap_list=('viins' 'vicmd' 'visual')

for keymap in $keymap_list; do
  # Aliasing movement keys (With Alt) to arrow keys
  # NB: Mapping to arrow keys instead of directly to corresponding
  # zle widgets is convenient, because it uses every default mapping
  # to these arrows
  # See http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html
  bindkey -M $keymap -s '^[{{ key_rh_left  }}' '^[[D'
  bindkey -M $keymap -s '^[{{ key_rh_down  }}' '^[[B'
  bindkey -M $keymap -s '^[{{ key_rh_up    }}' '^[[A'
  bindkey -M $keymap -s '^[{{ key_rh_right }}' '^[[C'
done

# History backwards search (supports globbing)
bindkey '^[h' history-incremental-pattern-search-backward

# Get out of insert/visual mode with Alt-space (mapping to Esc)
bindkey -s '^[ ' '\e'

### End key mappings ###

# use generic completion system for programs not yet defined; (_gnu_generic works
# with commands that provide a --help option with "standard" gnu-like output.)
for compcom in cp deborphan df feh fetchipac gpasswd head hnb ipacsum mv \
               pal stow uname ; do
    [[ -z ${_comps[$compcom]} ]] && compdef _gnu_generic ${compcom}
done; unset compcom

### Begin lazy loaded modules and completions ###

# We lazy-load these because they take WAY too long to load otherwise.
# See https://blog.jonlu.ca/posts/speeding-up-zsh and all the links at the bottom of the post

# Lazily load nvm and its completion if installed
# NB : This unloads nvm when re-sourcing .zshrc. Don't care.
# It is possible to load it even on commands such as npm, grunt, etc...
# with https://github.com/robbyrussell/oh-my-zsh/issues/5327#issuecomment-386480914
export NVM_DIR="$HOME/.nvm"
if [[ -d $NVM_DIR ]]; then
  nvm() {
    echo "GLOBALRC : Loading nvm..."
    source "$NVM_DIR/nvm.sh"  # This loads nvm
    source "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
    nvm $@ # Execute the newly defined nvm
  }
fi

### End lazy loaded modules and completions ###

# Comes back into previous directory
popd > /dev/null

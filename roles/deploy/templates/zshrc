#!/bin/zsh

# To get started with your own zshrc, start with the following script :
# (it is the one run by default by zsh at shell startup if you have no zshrc)
# `zsh /usr/share/zsh/functions/Newuser/zsh-newuser-install -f`
#
# Many options here were extracted from gmrl conf. See https://grml.org/zsh/

### begin VERY early initialization

# Disable flow control, to free C-S and C-Q
# cf https://unix.stackexchange.com/questions/12107/how-to-unfreeze-after-accidentally-pressing-ctrl-s-in-a-terminal
stty -ixon


### end VERY early initialization

# Places you into current directory
pushd $(dirname $0) > /dev/null

# Loading common components RELEASE_BLOCKER only zsh compat?
source bazshrc.sh

# Expand fpath to include custom functions
fpath=(
  {{ remote_directory }}/files/zsh_fpath      # custom scripts
  $fpath                                      # default fpath
  {{ remote_directory }}/generated_zsh_fpath  # extra generated completions
)
# Autoload custom functions defined in zsh_fpath
autoload bonjour ff mkcd pub

### Begin various configuration ###

# For `setopt` possible values and documentation, see : http://zsh.sourceforge.net/Doc/Release/Options.html
# For history variables, see : http://zsh.sourceforge.net/Guide/zshguide02.html#l17

# Allow help
autoload -U run-help
autoload run-help-git

# zmv is a mass-rename tool
autoload zmv

# Path of file containing command history
# NB: This path is in user's home even in case of sshrc
HISTFILE=~/.zsh_history

# Number of history commands to read at shell startup, and to keep per session
HISTSIZE=1000

# Number of history commands to write at shell exit
SAVEHIST=1000

# Add commands to history file directly at execution time
setopt inc_append_history_time

# Never ever store duplicates in history
setopt hist_ignore_all_dups

# remove command lines from the history list when the first character on the
# line is a space
setopt hist_ignore_space

# Store commands in history without extraneous spaces
setopt hist_reduce_blanks

# Report about cpu-/system-/user-time of command if running longer than 5 seconds
REPORTTIME=5

# Print a message every time somebody else than me logs in/out
watch=notme

# if a command is issued that can't be executed as a normal command, and the
# command is the name of a directory, perform the cd command to that directory.
setopt auto_cd

# display PID when suspending processes as well
setopt long_list_jobs

# make cd push the old directory onto the directory stack.
setopt auto_pushd

# avoid "beep"ing
setopt no_beep

# don't push the same dir twice.
setopt pushd_ignore_dups

### End various configuration ###



### Begin completion pre-configuration ###

# TODO : document the meaning of each of those lines
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _complete _ignored _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' insert-unambiguous true
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-prompt '%SAt %p: Hit TAB for more, or the character to insert%s'
zstyle ':completion:*' matcher-list '' 'm:{[:lower:]}={[:upper:]}' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'r:|[._-]=* r:|=*'
zstyle ':completion:*' max-errors 2
zstyle ':completion:*' menu select=5
zstyle ':completion:*' original false
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
zstyle ':completion:*' use-compctl false

# Provide more processes in completion of programs like killall:
zstyle ':completion:*:processes-names' command 'ps c -u ${USER} -o command | uniq'

# Search path for sudo completion
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin \
                                           /usr/local/bin  \
                                           /usr/sbin       \
                                           /usr/bin        \
                                           /sbin           \
                                           /bin            \
                                           /usr/X11R6/bin


# host completion
[[ -r ~/.ssh/config ]] && _ssh_config_hosts=(${${(s: :)${(ps:\t:)${${(@M)${(f)"$(<$HOME/.ssh/config)"}:#Host *}#Host }}}:#*[*?]*}) || _ssh_config_hosts=()
[[ -r ~/.ssh/known_hosts ]] && _ssh_hosts=(${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:#[\|]*}%%\ *}%%,*}) || _ssh_hosts=()
[[ -r /etc/hosts ]] && : ${(A)_etc_hosts:=${(s: :)${(ps:\t:)${${(f)~~"$(</etc/hosts)"}%%\#*}##[:blank:]#[^[:blank:]]#}}} || _etc_hosts=()

hosts=(
    $(hostname)
    "$_ssh_config_hosts[@]"
    "$_ssh_hosts[@]"
    "$_etc_hosts[@]"
    localhost
)
zstyle ':completion:*:hosts' hosts $hosts

### End completion pre-configuration ###

###############################################################################
# Plugins pre-configuration                                                   #
###############################################################################

# See https://github.com/unixorn/awesome-zsh-plugins for zsh plugins

### zsh-syntax-highlighting ###
# Choose enabled highlighters
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

###############################################################################

### List of plugins ###

# Fish-like history-based suggestions
source "{{ remote_directory }}/zsh_plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"

# Community packaging of completions for common programs
fpath=({{ remote_directory }}/zsh_plugins/zsh-completions/src $fpath)

autoload -Uz compinit
if [[ ${UID} -eq 0 ]] && [[ -n ${SUDO_USER} ]]; then
  # We are root, do not check for insecure directories, since this check was
  # done for your regular user, and since some files in fpath do not belong to
  # root but to your regular user
  compinit -u
else
  compinit
fi

# Fish-like syntax highlighting
# NB : MUST be sourced after compinit (and as late as possible)
# NB : The highlighting gets slow on large buffers.
# TODO: For a fix approach, see : https://github.com/zsh-users/zsh-syntax-highlighting/issues/361
source "{{ remote_directory }}/zsh_plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"

### Inline atuin widget initialization ###

# Inline the contents of the atuin initialization command
# NB : We explicitly ask atuin NOT to setup keybindings, so that we can define them ourselves as we want to (although current config is default)
# NB : atuin init is so fast to run that doing this is probably not much of a performance gain. It still improves debuggability though, and might
#      play nicer with the zsh config loading cache ?
# NB : atuin has an integration with zsh-autosuggestions, enabled by default ONLY if this conf is loaded after zsh-autosuggestions
# TODO : we can probably disable native zsh history altogether, now that we have this

# Use globalrc-managed config file
export ATUIN_CONFIG_DIR="{{ remote_directory }}/files/atuin"

# Generated with : {{ atuin_init_zsh.cmd | join(" ") }}

# Begin generated content
{{ atuin_init_zsh.stdout }}
# End generated content

### End inline atuin widget initialization ###

eval "$(starship init zsh)"

###############################################################################
# Plugins post-configuration                                                  #
###############################################################################

### zsh-syntax-highlighting ###
# Main highlight configuration (not all available options)
ZSH_HIGHLIGHT_STYLES+=(
  unknown-token         'fg=red,bold'
  reserved-word         'fg=yellow'
  alias                 'fg=green,bold'
  builtin               'fg=green,bold'
  function              'fg=green,bold'
  command               'fg=green,bold'
  precommand            'fg=green'
  hashed-command        'fg=green'
  path                  'fg=blue,bold'
  path_prefix           'fg=blue'
  path_approx           'fg=blue,underlined'
  globbing              'fg=yellow,underlined'
  single-hyphen-option  'fg=purple,bold'
  double-hyphen-option  'fg=purple,bold'
  back-quoted-argument  'fg=purple,bold'
  default               'fg=cyan,bold'
)

### zsh-autosuggestions ###
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=200 # Disable suggestions past a certain command length

# We're not savages so we manually bind the widgets once, at initialization, instead of at every single precmd
# This MUST be executed after all other zle widget initializations
# zsh-autosuggest creates a precmd (_zsh_autosuggest_start) that, which, by default, will re-wrap every zle widget (_zsh_autosuggest_bind_widgets)
# at EVERY precmd. We're not savages, so we disable this. Instead, it will only run it at the very first precmd, then unregister itself.
# There is therefore no need to manually call _zsh_autosuggest_bind_widgets at init time, only if we were to define new widgets later on.
ZSH_AUTOSUGGEST_MANUAL_REBIND=1

# NB : It's quite likely possible to replace this system (wrapping all zle widgets) with a zle-line-pre-redraw hook, just like zsh-syntax highlighting.
# TODO : open an issue ? Maybe even submit a PR ?

###############################################################################


### Start key mappings ###

# History backwards search (supports globbing)
# TODO : probably made obsolete by atuin
# bindkey '^[g' history-incremental-pattern-search-backward

# Explicit atuin key bindings
bindkey '^r' _atuin_search_widget
bindkey '^[[A' _atuin_up_search_widget
bindkey '^[OA' _atuin_up_search_widget

### End key mappings ###

### Begin extra manual completions

# use generic completion system for programs not yet defined; (_gnu_generic works
# with commands that provide a --help option with "standard" gnu-like output.)
for compcom in cp deborphan df feh fetchipac gpasswd head hnb ipacsum mv pal stow uname ; do
    [[ -z ${_comps[$compcom]} ]] && compdef _gnu_generic ${compcom}
done; unset compcom

# bash compatibility
autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/bin/terraform terraform
complete -o nospace -C /usr/bin/packer packer
# AWS cli packaging is shit
complete -C '/usr/local/bin/aws_completer' aws

### End extra manual completions

# Comes back into previous directory
popd > /dev/null


# g gets the same completion as git (alias defined in bazshrc))
compdef g=git
